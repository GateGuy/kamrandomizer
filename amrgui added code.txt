        self.RadioButton_UseSettings.configure(command=self.prepareSettingsAndSeed)
        self.RadioButton_UseSeed.configure(command=self.prepareSettingsAndSeed)
        self.Button_CreateRom.configure(command=self.attemptRandomize)
        self.ComboBox_AbilityDistribution.bind('<<ComboboxSelected>>',self.changedAbilityDistributionType)
        self.ComboBox_EnemiesWithoutAbility.bind('<<ComboboxSelected>>',self.changedBasicEnemyBehaviorType)
        self.ComboBox_RandomizeObjects.bind('<<ComboboxSelected>>',self.changedObjectRandomizationType)

    def prepareSettingsAndSeed(self, unused=None):
        if AMR_support.useSeed.get()=="1":
            self.Entry_SeedInput.configure(state="normal")
            self.Label_AbilityDistribution.configure(state="disabled")
            self.ComboBox_AbilityDistribution.configure(state="disabled")
            self.Label_EnemiesWithoutAbility.configure(state="disabled")
            self.ComboBox_EnemiesWithoutAbility.configure(state="disabled")
            self.Label_UndecidedEnemyChance.configure(state="disabled")
            self.Entry_UndecidedEnemyChance.configure(state="disabled")
            self.CheckButton_RandomizeMiniBosses.configure(state="disabled")
            self.CheckButton_RandomizeMinnyAndWheelie.configure(state="disabled")
            self.Label_RandomizeObjects.configure(state="disabled")
            self.ComboBox_RandomizeObjects.configure(state="disabled")
            self.Label_UndecidedObjectChance.configure(state="disabled")
            self.Entry_UndecidedObjectChance.configure(state="disabled")
            self.Label_NumSeeds.configure(state="disabled")
            self.ComboBox_NumSeeds.configure(state="disabled")
        else:
            self.Entry_SeedInput.configure(state="disabled")
            self.Label_AbilityDistribution.configure(state="normal")
            self.ComboBox_AbilityDistribution.configure(state="readonly")
            if AMR_support.abilityDistributionType.get() != "Pure Random":
                self.Label_EnemiesWithoutAbility.configure(state="disabled")
                self.ComboBox_EnemiesWithoutAbility.configure(state="disabled")
            else:
                self.Label_EnemiesWithoutAbility.configure(state="normal")
                self.ComboBox_EnemiesWithoutAbility.configure(state="readonly")
            if AMR_support.basicEnemyBehaviorType.get() in ["No Random (Unchanged)", "N/A"]:
                self.Label_UndecidedEnemyChance.configure(state="disabled")
                self.Entry_UndecidedEnemyChance.configure(state="disabled")
            else:
                self.Label_UndecidedEnemyChance.configure(state="normal")
                self.Entry_UndecidedEnemyChance.configure(state="normal")
            self.CheckButton_RandomizeMiniBosses.configure(state="normal")
            self.CheckButton_RandomizeMinnyAndWheelie.configure(state="normal")
            self.Label_RandomizeObjects.configure(state="normal")
            self.ComboBox_RandomizeObjects.configure(state="readonly")
            if AMR_support.objectRandomizationType.get() != "Yes":
                self.Label_UndecidedObjectChance.configure(state="disabled")
                self.Entry_UndecidedObjectChance.configure(state="disabled")
            else:
                self.Label_UndecidedObjectChance.configure(state="normal")
                self.Entry_UndecidedObjectChance.configure(state="normal")
            self.Label_NumSeeds.configure(state="normal")
            self.ComboBox_NumSeeds.configure(state="readonly")

    def changedAbilityDistributionType(self, unused=None):
        if AMR_support.abilityDistributionType.get() != "Pure Random":
            AMR_support.basicEnemyBehaviorType.set("N/A")
        else:
            AMR_support.basicEnemyBehaviorType.set("All Random")
        if AMR_support.basicEnemyBehaviorType.get() in ["No Random (Unchanged)", "N/A"]:
            AMR_support.noneAbilityChanceEnemy.set("N/A")
        else:
            AMR_support.noneAbilityChanceEnemy.set("90")
        self.prepareSettingsAndSeed()

    def changedBasicEnemyBehaviorType(self, unused=None):
        if AMR_support.basicEnemyBehaviorType.get() in ["No Random (Unchanged)", "N/A"]:
            AMR_support.noneAbilityChanceEnemy.set("N/A")
        else:
            AMR_support.noneAbilityChanceEnemy.set("90")
        self.prepareSettingsAndSeed()

    def changedObjectRandomizationType(self, unused=None):
        if AMR_support.objectRandomizationType.get() != "Yes":
            AMR_support.noneAbilityChanceObject.set("N/A")
        else:
            AMR_support.noneAbilityChanceObject.set("90")
        self.prepareSettingsAndSeed()

    def attemptRandomize(self):
        results = randomize()
        AMR_support.message.set(results[1])
        self.Label_Message.configure(foreground="#0000FF" if results[0] else "#FF0000")